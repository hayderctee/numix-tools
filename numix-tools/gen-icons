#!/bin/bash
# Script to generate icons from SVG templates
#
# Copyright (c) 2014  Numix Project
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DIRECTORY STRUCTURE
#
# The script understands the following directory structure.
# It will take color information and file name from the symbols
#
# input/
#     template/
#         meta.template
#         shadow.svg
#         background.svg
#         underlay.svg
#         overlay.svg
#         clip.svg
#     symbols/
#         file-manager.svg
#         text-editor.svg
#         web-browser.svg
# output/
#     svg/
#     png/
#
# COLOR INFORMATION
#
# The color information should be written in the following format
# Only HEX color code is recognized
#
# <!-- color: #d64937 -->

while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--dir)
            basedir="$2"
            shift;;
        -p|--png)
            makepng="true";;
        -s|--store)
            optimize="false";;
        -h|--help)
            args=( "-d, --dir <directory>" "-p, --png" "-s, --store" "-h, --help" )
            desc=( "specify base directory" "generate PNG files" "don't optimize icons" "show this help message and exit" )
            printf "Usage:\tgen-icons [options...]\n\n"
            for ((i=0; i < ${#args[@]}; i++)); do
                printf "\t%-30s%-s\n" "${args[i]}" "${desc[i]}"
            done
            exit;;
        -?|--*)
            printf "Unrecognized option '$1'. Try '--help' for all available options.\n"
            exit;;
        -*)
            args="$1"
            shift
            set -- $(printf "$args" | cut -c 2- | sed 's/./-& /g') "$@"
            continue;;
        *)
            break;;
    esac
    shift
done

[[ "$basedir" = "" ]] && basedir="."
[[ "$makepng" = "" ]] && makepng="false"
[[ "$optimize" = "" ]] && optimize="true"

indir="$basedir/input"
outdir="$basedir/output"
templatedir="$indir/template"
symbolsdir="$indir/symbols"
templatefile="$templatedir/meta.template"
indexsvg="0"
indexpng="0"
indexsvgerr="0"
indexpngerr="0"

trap exit INT

show_success() {
echo -e "\033[0;32m$@\033[0m"
return 0
}

show_warning() {
echo -e "\033[0;33m$@\033[0m"
}

show_error() {
echo -e "\033[0;31m$@\033[0m" 1>&2
return 1
}

make_png() {
rm -f "$outdir/png/${icon/svg/png}"

which rsvg-convert > /dev/null 2>&1
if [[ $? -eq 0 ]]; then
    rsvg-convert "$outdir/svg/$icon" -o "$outdir/png/${icon/svg/png}" > /dev/null 2>&1
else
    show_warning "rsvg-convert not installed."
fi

if [[ -f "$outdir/png/${icon/svg/png}" ]]; then
    if [[ $optimize = "true" ]]; then
        which optipng > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            optipng -strip all -o7 -zm1-9 "$outdir/png/${icon/svg/png}" > /dev/null 2>&1
        else
            show_warning "optipng not installed."
        fi
    fi

    (( indexpng++ ))

    show_success "Successfully wrote ${icon/svg/png}."
else
    (( indexpngerr++ ))

    show_error "Failed to write ${icon/svg/png}."
fi
}

make_svg() {
layers=$(echo "$1" | sed -e "s/\+/ /g")
svg="<svg ${viewbox}>"

for layer in $layers; do
    if [[ ! $layer = "" ]]; then
        svg+="<g id=\"${layer}\">${!layer}</g>"
    fi
done

svg+="</svg>"

rm -f "$outdir/svg/$icon"
echo "$svg" > "$outdir/svg/$icon"

if [[ -f "$outdir/svg/$icon" && `grep "</svg>" "$outdir/svg/$icon"` ]]; then
    sed -i "s/<g><\/g>//g" "$outdir/svg/$icon"

    if [[ $optimize = "true" ]]; then
        which svgcleaner-cli > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            svgcleaner-cli "$outdir/svg/$icon" "$outdir/svg/$icon" --preset=basic --remove-prolog --remove-proc-instr --remove-unused-defs --remove-metadata-elts --remove-inkscape-elts --remove-sodipodi-elts --remove-ai-elts --remove-corel-elts --remove-msvisio-elts --remove-sketch-elts --remove-outside-elts --equal-elts-to-use --remove-version --remove-unreferenced-ids --trim-ids --remove-inkscape-atts --remove-sodipodi-atts --remove-ai-atts --remove-corel-atts --remove-msvisio-atts --remove-sketch-atts --remove-stroke-props --remove-fill-props > /dev/null 2>&1
        else
            show_warning "svgcleaner-cli not installed."
        fi
    fi

    (( indexsvg++ ))

    show_success "Successfully wrote $icon."
else
    (( indexsvgerr++ ))

    show_error "Failed to write $icon."
fi
}

strip_tags() {
cat "$1" | tr "\n" " " | sed -e "s/<\/\?svg[^>]*>//g" -e "s/<[?]\?xml[^>]*>//g"
}

add_attr() {
data="$1"
attr="$2"
type=$(echo $attr | cut -f1 -d"=")
if [[ "$type" = "fill" ]]; then
    if [[ $attr =~ ^.+=\".+\[.+\]\"$ ]]; then
        prop=$(echo $attr | cut -f2 -d"\"")
        value=$(read_props "$prop")
    else
        value=$(echo $attr | cut -f2 -d"\"")
    fi

    color=${value:0:7}

    if [[ $(echo "$data" | grep "fill[:=]") ]]; then
        data=$(echo "$data" | sed -e "s/fill=\"/style=\"fill:/g" -e "s/fill:[^;\"]*/fill:${color}/g")
    else
        oldtag=$(echo $data | grep -o "<.*" | grep -v "<[\!\?].+" | head -n 1 | sed -e 's/[[\.+^$/]/\\&/g')
        newtag=$(echo $oldtag | sed -e "s/$/ style=\"fill:${color}\"/")
        data=$(echo "$data" | sed -e "0,/$oldtag/s//$newtag/")
    fi

    echo "$data"
elif [[ "$type" = "clip-path" ]]; then
    url=$(echo $attr | cut -f2 -d"\"" | cut -f1 -d".")
    echo "<defs><clipPath id=\"clipPath-${url}\">${!url}</clipPath></defs><g clip-path=\"url(#clipPath-${url})\">${data}</g>"
else
    echo "<g $attr>$data</g>"
fi
}

get_viewbox() {
file=$(find "$templatedir" -type f -name "*.svg" | xargs ls -1S | head -n 1)
viewbox=$(cat "$file" | grep -o 'viewBox="[^"]*"')

if [[ "$viewbox" = "" ]]; then
    width=$(cat "$file" | tr "\n" " " | grep -o "<svg[^>]*>" | grep -o 'width="[^"]*"' | sed -e "s/width=//g" -e "s/\"//g")
    height=$(cat "$file" | tr "\n" " " | grep -o "<svg[^>]*>" | grep -o 'height="[^"]*"' | sed -e "s/height=//g" -e "s/\"//g")
    viewbox="viewBox=\"0 0 $width $height\""
fi

export "$viewbox"
}

read_props() {
data=$(echo "$1" | sed -e "s/\[/_/" -e "s/\]//")
prop=$(echo "$data" | cut -f1 -d"_")
name=$(echo "$data" | cut -f2 -d"_")
value=$(echo "${!name}" | grep -o "<\!-- ${prop}: .* -->" | sed -e "s/<\!-- ${prop}: //g" -e "s/ -->//g")
echo $value
}

read_files() {
while read svg; do
    name=${svg##*/}
    var=${name%.svg}
    export $var="$(strip_tags $svg)"
done < <(find "$templatedir/" -name '*.svg' | sort -u)
}

read_index() {
echo "$1" | while read line; do
    data=""

    for command in ${line[@]}; do
        if [[ "$command" =~ ^[a-z]+$ ]]; then
            data="$command"
        elif [[ "$command" =~ ^[a-z\-]+=\".*\"$ ]]; then
            declare $data="$(add_attr "${!data}" "$command")"
        elif [[ "$command" =~ ^[a-z\-]+=\".*\"\!$ ]]; then
            declare $data="$(add_attr "${!data}" "$command" "important")"
        elif [[ "$command" =~ ^\%[a-z]+$ ]]; then
            export ${command#%}="${!data}"
            data=${command#%}
        elif [[ "$command" =~ ^[a-z]+\+.*[a-z]+$ ]]; then
            make_svg "$command"

            [[ "$makepng" = "true" ]] && make_png
        fi
    done
done
}

gen_icons() {
if [[ ! -d "$templatedir" || ! -d "$symbolsdir" ]]; then
    show_error "Directory structure is not set up."
    exit 1
fi

[[ -d "$outdir/svg" ]] || mkdir -p "$outdir/svg"
[[ -d "$outdir/png" ]] || [[ $makepng = "true" ]] && mkdir -p "$outdir/png"

if [[ -f "$templatefile" ]]; then
    template=$(cat "$templatefile" | sed -e "s/ //g" -e "s/->/ /g")
else
    show_error "No template file found."
    exit 1
fi

read_files
get_viewbox

while read file; do
    export icon=${file##*/}
    export symbol=$(strip_tags "$file")
    read_index "$template"
done < <(find "$symbolsdir/" -name '*.svg' | sort -u)
}

gen_icons
